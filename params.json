{"name":"Groundy","tagline":"Sexy way to execute async/background tasks on Android","body":"Groundy library for Android\r\n===========================\r\n\r\nGroundy is a fun, sexy way to do background work on your Android app; it's specially useful for\r\nrunning tasks that must be executed even if your activities are rotated or even quited. It allows\r\nyou to receive notifications from the background task directly to your activity or any object.\r\n\r\nIt is useful for several scenarios like executing calls to external services (e.g. RESTful web\r\nservices), download and/or process files, encoding audio/video and any kind of task that could\r\nblock the main thread.\r\n\r\nBasic usage\r\n===========\r\n\r\nCreate a subclass of `GroundyTask`:\r\n\r\n```java\r\npublic class ExampleTask extends GroundyTask {\r\n  @Override\r\n  protected TaskResult doInBackground() {\r\n    // you can send parameters to the task using a Bundle (optional)\r\n    String exampleParam = getStringParam(\"key_name\");\r\n\r\n    // lots of code\r\n\r\n    // return a TaskResult depending on the success of your task\r\n    // and optionally pass some results back\r\n    Succeeded result = new Succeeded();\r\n    result.add(\"the_result\", \"some result\");\r\n    return result;\r\n  }\r\n}\r\n```\r\n\r\nWhenever you want to execute the task, just do this:\r\n\r\n```java\r\n// this is usually performed from within an Activity\r\nBundle params = new Bundler().add(\"key_name\", \"foo\").build();\r\nGroundy.create(this, ExampleTask.class)\r\n    .callback(YourActivity.this)  // required if you want to get notified of your task lifecycle\r\n    .params(params)               // optional\r\n    .queue();\r\n```\r\n\r\nYou will get results in your result receiver (in the main thread):\r\n\r\n```java\r\n@OnSuccess(ExampleTask.class)\r\npublic void onSuccess(@Param(\"the_result\") String result) {\r\n  // do something with the result\r\n}\r\n```\r\n\r\nDo not forget to add `GroundyService` to the `AndroidManifest.xml` file:\r\n\r\n```xml\r\n<service android:name=\"com.telly.groundy.GroundyService\"/>\r\n```\r\n\r\nExtending callback system\r\n=========================\r\n\r\nThere are some already defined callback annotations: `@OnSuccess`, `@OnFailed`, `@OnCancel`,\r\n`@OnProgress` and `@OnStart`, but you can also create your own callback types. Take a look\r\nat the Custom callbacks example and learn how you can write callbacks like:\r\n\r\n```java\r\n@OnChuckNorris\r\npublic void onChuckNorrisAttack(@Param(\"target\") String target) {\r\n  Toast.makeText(this, \"Chuck Norris kicked your \" + target, Toast.LENGTH_SHORT).show();\r\n}\r\n```\r\n\r\nMaven integration\r\n=================\r\n\r\nIn order to use this library from you Android project using maven your pom should look like this:\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.telly</groupId>\r\n  <artifactId>groundy</artifactId>\r\n  <version>0.9-SNAPSHOT</version>\r\n  <scope>compile</scope>\r\n</dependency>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}